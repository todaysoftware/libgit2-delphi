(**
 * @file git2/errors.h
 * @brief Error handling routines and variables
 * @ingroup Git
 * @{
  *)

(** Generic return codes  *)

const
	(**
	 * No error occurred; the call was successful.
	 *)
  GIT_OK                      = 0;
	(**
	 * An error occurred; call `git_error_last` for more information.
	 *)
  GIT_ERROR                   = -1;
  GIT_ENOTFOUND               = -3; (**< Requested object could not be found.  *)
  GIT_EEXISTS                 = -4; (**< Object exists preventing operation.  *)
  GIT_EAMBIGUOUS              = -5; (**< More than one object matches.  *)
  GIT_EBUFS                   = -6; (**< Output buffer too short to hold data.  *)
  (**
   * GIT_EUSER is a special error that is never generated by libgit2
   * code.  You can return it from a callback (e.g to stop an iteration)
   * to know that it was generated by the callback and not by libgit2.
   *)
  GIT_EUSER                   = -7;
  GIT_EBAREREPO               = -8; (**< Operation not allowed on bare repository.  *)
  GIT_EUNBORNBRANCH           = -9; (**< HEAD refers to branch with no commits.  *)
  GIT_EUNMERGED               = -10; (**< Merge in progress prevented operation  *)
  GIT_ENONFASTFORWARD         = -11; (**< Reference was not fast-forwardable  *)
  GIT_EINVALIDSPEC            = -12; (**< Name/ref spec was not in a valid format  *)
  GIT_ECONFLICT               = -13; (**< Checkout conflicts prevented operation  *)
  GIT_ELOCKED                 = -14; (**< Lock file prevented operation  *)
  GIT_EMODIFIED               = -15; (**< Reference value does not match expected  *)
  GIT_EAUTH                   = -16; (**< Authentication error  *)
  GIT_ECERTIFICATE            = -17; (**< Server certificate is invalid  *)
  GIT_EAPPLIED                = -18; (**< Patch/merge has already been applied  *)
  GIT_EPEEL                   = -19; (**< The requested peel operation is not possible  *)
  GIT_EEOF                    = -20; (**< Unexpected EOF  *)
  GIT_EINVALID                = -21; (**< Invalid operation or input  *)
  GIT_EUNCOMMITTED            = -22; (**< Uncommitted changes in index prevented operation  *)
  GIT_EDIRECTORY              = -23; (**< The operation is not valid for a directory  *)
  GIT_EMERGECONFLICT          = -24; (**< A merge conflict exists and cannot continue  *)
  GIT_PASSTHROUGH             = -30; (**< A user-configured callback refused to act  *)
  GIT_ITEROVER                = -31; (**< Signals end of iteration with iterator  *)
  GIT_RETRY                   = -32; (**< Internal only  *)
  GIT_EMISMATCH               = -33; (**< Hashsum mismatch in object  *)
  GIT_EINDEXDIRTY             = -34; (**< Unsaved changes in the index would be overwritten  *)
  GIT_EAPPLYFAIL              = -35; (**< Patch application failed  *)
  GIT_EOWNER                  = -36; (**< The object is not owned by the current user *)
  GIT_TIMEOUT                 = -37; (**< The operation timed out *)
  GIT_EUNCHANGED              = -38; (**< There were no changes *)
  GIT_ENOTSUPPORTED           = -39; (**< An option is not supported *)
  GIT_EREADONLY               = -40; (**< The subject is read-only *)
type
  git_error_code = Integer;

  (**
   * Error classes are the category of error. They reflect the area of the
   * code where an error occurred.
   *)

const
  GIT_ERROR_NONE              = 0;
  GIT_ERROR_NOMEMORY          = 1;
  GIT_ERROR_OS                = 2;
  GIT_ERROR_INVALID           = 3;
  GIT_ERROR_REFERENCE         = 4;
  GIT_ERROR_ZLIB              = 5;
  GIT_ERROR_REPOSITORY        = 6;
  GIT_ERROR_CONFIG            = 7;
  GIT_ERROR_REGEX             = 8;
  GIT_ERROR_ODB               = 9;
  GIT_ERROR_INDEX             = 10;
  GIT_ERROR_OBJECT            = 11;
  GIT_ERROR_NET               = 12;
  GIT_ERROR_TAG               = 13;
  GIT_ERROR_TREE              = 14;
  GIT_ERROR_INDEXER           = 15;
  GIT_ERROR_SSL               = 16;
  GIT_ERROR_SUBMODULE         = 17;
  GIT_ERROR_THREAD            = 18;
  GIT_ERROR_STASH             = 19;
  GIT_ERROR_CHECKOUT          = 20;
  GIT_ERROR_FETCHHEAD         = 21;
  GIT_ERROR_MERGE             = 22;
  GIT_ERROR_SSH               = 23;
  GIT_ERROR_FILTER            = 24;
  GIT_ERROR_REVERT            = 25;
  GIT_ERROR_CALLBACK          = 26;
  GIT_ERROR_CHERRYPICK        = 27;
  GIT_ERROR_DESCRIBE          = 28;
  GIT_ERROR_REBASE            = 29;
  GIT_ERROR_FILESYSTEM        = 30;
  GIT_ERROR_PATCH             = 31;
  GIT_ERROR_WORKTREE          = 32;
  GIT_ERROR_SHA               = 33;
  GIT_ERROR_HTTP              = 34;
  GIT_ERROR_INTERNAL          = 35;
  GIT_ERROR_GRAFTS            = 36;
type
  git_error_t = Integer;

  (**
   * Structure to store extra details of the last error that occurred.
   *
   * This is kept on a per-thread basis if GIT_THREADS was defined when the
   * library was build, otherwise one is kept globally for the library
   *)
  git_error_ = record
    message: PAnsiChar;  (**< The error message for the last error. *)
    klass: Integer;      (**< The category of the last error. @type git_error_t *)
  end;
  Pgit_error = ^git_error_;

  (**
   * Return the last `git_error` object that was generated for the
   * current thread.
   *
   * This function will never return NULL.
   *
   * Callers should not rely on this to determine whether an error has
   * occurred. For error checking, callers should examine the return
   * codes of libgit2 functions.
   *
   * This call can only reliably report error messages when an error
   * has occurred. (It may contain stale information if it is called
   * after a different function that succeeds.)
   *
   * The memory for this object is managed by libgit2. It should not
   * be freed.
   *
   * @return A pointer to a `git_error` object that describes the error.
   *)

function git_error_last: Pgit_error; cdecl; external libgit2_dll;

(** @}  *)

